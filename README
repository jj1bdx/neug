NeuG - a true random number generator implementation (for STM32F103)

							  Version 1.0.4
							     2015-09-18
						           Niibe Yutaka
				      Free Software Initiative of Japan

What's NeuG?
============

NeuG is a set of routines of random number generator (RNG) which is
based on physical noise.  It supports STM32F103.  It can be stand
alone USB RNG device (with main routine), too.

The name comes from Japanized English word "noidgy" (from English word
"noisy"), where many Japanese (including me) don't distinguish
pronunciations of "gee" and "zee".  NeuG includes my important letters
of "g", "n", and "u", and the word "neu" (German spelling of "new").

My primary intention was to incorporate NeuG routines into Gnuk for
random number generation, but the stand alone version could be useful
too.

Gnuk was named after my son who loved the pacifier when he was baby.
NeuG was named after my daughter, but I don't say she is noisy.


Release notes
=============

This is the fourth minor release of NeuG, after 1.0.

Basic features (generating random numbers) are stable, but newly added
things like Fraucheky (USB Mass Storage Class) support and reGNUal
(firmware upgrad) support should be considered experimental.

Note that you need Chopstx (the thread library) as external source
code (instead of ChibiOS/RT).  If you get the source code by Git,
Chopstx is submodule of NeuG.


FAQ
===

Q0: How NeuG device is good?
A0: I believe it's good enough if we compare to other hardware RNGs.
    I evaluated it with rngtest of RNG-tools, NIST STS test suite and
    Dieharder.  See the directory neug/test-results/.
A0-dash: For better entropy device with embedded test, you could get
         EntropyKey.  See http://www.entropykey.co.uk/
A0-double-dash: STM32F2xx and STM32F4xx have built-in TRNG, it would
                be better for you (although the quality of randomness
                looks not that good).

Q1: How fast is NeuG device?
A1: It's more than 80 kB/sec for conditioned output (by SHA-256), and
    more than 280 kB/sec for CRC-32 filtered output (kB = 1000 byte).

Q2: Should we check condition of noise sources?
A2: Yes, we should.  Three continuous tests are implemented, following
    (Draft of) NIST SP 800-90B.  Those are Repetition Count Test,
    Adaptive Proportion Test (for 64 samples), and another Adaptive
    Proportion Test (for 4096 samples).  When it detects an error (it
    is really rare, but it could occur even for normal condition), the
    generation of random bits restart again.

Q3: Conditioning with SHA-256 sounds over-kill.  Why not simpler?
A3: It is because NIST SP 800-90B mandates something like that for
    "full entropy source".  If your usage is as an entropy source for
    RNG-tools to feed entropy to your kernel, or use for computer
    simulations, I think that CRC-32 filtered output would be good
    enough.


Targets
=======

FST-01, Nitrokey-Start, Olimex STM32-H103, STM32 part of STM8S
Discovery Kit, STBee Mini, STBee, STM32 Primer 2, CQ STARM, ST Dongle
and STM32 Nucleo F103 are supported.


Build system and Host system
============================

Makefile is written for GNU make.  You need Bash 4.x for configure.

If your bash is not installed as /bin/bash, you need to run configure
script prepending 'bash' before './configure'.

Some tools are written in Python.  If your Python is not installed as
/usr/bin/python, please prepend 'python' for your command invocation.
Python 2.7 and PyUSB 0.4.3 is assumed.


Souce code
==========

NeuG source code is under src/ directory.

Note that SHA-256 hash function implementation, src/sha256.c, is based
on the original implementation by Dr. Brian Gladman.  See:

  http://gladman.plushost.co.uk/oldsite/cryptography_technology/sha/index.php


License
=======

It is distributed under GNU General Public Licence version 3 or later
(GPLv3+).  Please see src/COPYING.


External source code
====================

NeuG is distributed with external source code.

* chopstx/ -- Chopstx, the RT Thread Library

* [optional] fraucheky/ -- Fraucheky, the GPL container

Those are available at:

  https://anonscm.debian.org/cgit/gnuk/chopstx/


USB vendor ID and product ID (USB device ID)
============================================

When you have a vender ID and assign a product ID for NeuG, edit the
file NEUG_USB_DEVICE_ID and add an entry for yours.  In this case,
please contact Niibe, so that it is listed to the file in the official
release of the source code.

When you are modifing NeuG and installing the binary to device, you
should replace the vendor string to yours, so that users can see it's
not by original vendor, and it is modified version.

FSIJ allows you to use USB device ID of FSIJ (234b:0001) for devices
with standalone NeuG under one of following conditions:

  * For everyone for experimental purpose:

    - You must not distribute a binary with FSIJ's USB device ID, but
      must use the binary by yourself only for your experiment.  Note
      that "Distributing binary" includes distributing a device which
      holds the binary.

  * For individuals:

    - No additional conditions.

FSIJ could give companies or business entities "second source
manufacturer" license to use USB device ID of FSIJ for devices with
unmodified version of NeuG, provided they support Free Software and
respect users' freedom for computing.  Please ask FSIJ for the
license.

Otherwise, companies which want to distribute NeuG devices, please use
your own USB vendor ID and product ID.  Please replace vendor string
and possibly product string to yours, when you modify NeuG.


How to compile
==============

You need GNU toolchain and newlib for 'arm-none-eabi' target.

On Debian we can install the packages of gcc-arm-none-eabi,
gdb-arm-none-eabi and its friends.  I'm using:

	binutils-arm-none-eabi	2.25-5+5+b1
	gcc-arm-none-eabi 	15:4.9.3+svn227297-1
	gdb-arm-none-eabi 	7.7.1+dfsg-5+8
	libnewlib-arm-none-eabi	2.2.0+git20150830.5a3d536-1

Or else, see https://launchpad.net/gcc-arm-embedded for preparation of
GNU Toolchain for 'arm-none-eabi' target.

Change directory to `src':

  $ cd neug-VERSION/src

Then, run `configure':

  $ ./configure --vidpid=<VID:PID>

Here, you need to specify USB vendor ID and product ID.  For FSIJ's,
it's: --vidpid=234b:0001 .  Please read section 'USB vendor ID and
product ID' above.


Type:

  $ make

Then, we will have "neug.elf" under the "build" directory.


How to install
==============

Olimex STM32-H103 board
-----------------------

If you are using Olimex JTAG-Tiny, type following to invoke OpenOCD:

  $ openocd -f interface/ftdi/olimex-jtag-tiny.cfg -f board/olimex_stm32_h103.cfg

Then, with another terminal, type following to write "neug.elf" to Flash ROM:

  $ telnet localhost 4444
  > reset halt
  > flash write_image erase neug.elf
  > reset
  > exit
  $ 


Flying Stone Tiny 01 and STM8S Discovery Kit
--------------------------------------------

If you are using Flying Stone Tiny 01, you need a SWD writer.

OpenOCD 0.6.1 or newer supports ST-Link/V2.  With that we can do:

  $ openocd -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg

Then, with another terminal, type following to write "neug.elf" to Flash ROM:

  $ telnet localhost 4444
  > reset halt
  > flash write_image erase neug.elf
  > reset
  > exit
  $ 

Note that OpenOCD (as of 0.7.0) doesn't support option bytes handling yet.

You can also use tool/stlinkv2.py in Gnuk.


Use of NeuG device
==================

It is USB CDC ACM device.  On GNU/Linux, it can be /dev/ttyACM0 or like.
Before using /dev/ttyACM0, you need to configure its TTY discipline.

  $ stty -F /dev/ttyACM0 -echo raw

Then, you can use output of /dev/ttyACM0.

When you want to get CRC-32 filtered output, you can configure:

  $ stty -F /dev/ttyACM0 parenb parodd

for raw data after filter.  For direct raw data of ADC samples,
configure:

  $ stty -F /dev/ttyACM0 parenb -parodd

And you can get SHA-256 conditioned output by configuring:

  $ stty -F /dev/ttyACM0 -parenb


If your device is configured with Fraucheky, you can invoke Fraucheky
from NeuG by setting the unusual sequence of configurations:

  $ stty -F /dev/ttyACM0 ispeed 110 ospeed 110
  $ stty -F /dev/ttyACM0 ispeed 115200 ospeed 115200


Structure of NeuG
=================

Here is a figure of the circuit.

                                         Noise sources

                              /|<---+--- [ Analog input Vref ]
                16           | |<-+-|--- [ Analog input Temperature Sensor ]
             +---/-[ADC1] <==| |  | |
             |               | |<-+ |
      +-+    |                \|<---+
      | |<---+                |
 +----| |          MUX CTL >--+
 |    | |<---+
 |    +-+    |                /|
 |           |  16           | |<------- [ Analog input 0 ] (pull up to Vdd)
 |           +---/-[ADC2] <==| |
 |                           | |<------- [ Analog input 1 ] (pull up to Vdd)
 |                            \|
 |                            |
 |                 MUX CTL >--+
 |
 +------------------+         <============ (*1)
                    |
                    / 32
                    |
                    | Put 4 times to output 32-bit
                    V
            [ CRC-32 filter ]
                    |
                    |           Put 35 times to output 1120-bit
                    +---------------------------------+         <====== (*2)
                                                      |
                                                      / 32
                                                      |
                                                      V
                                              [ Entropy Buffer ]
                                                      |          
            +--------------+                          |
            |              |                          |
            | Conditioning |            1120          |
            | Component    |<------------/------------+
            |              |
      +-----|  Hash_df     |
      |     |    by        |
      |     |  SHA-256     |
      |     |              |  128
      |     |              |<--/--+
      |     +--------------+      |
      |                           |
      +---------------------------+
      |
      / 256
      |
      v
 Random Number Output <========== (*3)



Specifying by "stty", you can get (*3) with -parenb, (*2) with parenb
parodd, and (*1) with parenb -parodd.

STM32F103 has two built-in A/D converters.  NeuG uses A/D converters'
outputs as entropy sources.  It is considered noise of quantization
error, plus noise from power supply, etc.

We chose four analog input sources of: built-in voltage reference,
temperature sensor and two analog inputs which are pull-up to Vdd.

By a single sampling of two channels, we get 32-bit (not all 32-bit is
valid, as a A/D converter resolution is 12-bit only).  We take four
sampling of combinations: (Vref, IN0), (Temp, IN1), (Vref, IN1), and
(Temp, IN0).  Those 32-bit * 4 is fed into CRC32 filter.

We use STM32F103's CRC32 calculation unit as a kind of filter.  We put
output of A/D converters into CRC32 calculation unit, four times, to
get 4-byte output.

Output of CRC32 filter is collected 35 times, and it becomes 1120-bit
(32 * 35).  This is the noise source bits.

We put this 1120-bit and half of previous output (128-bit) to
conditioning component.

Conditioning Component is implemented by Hash_df function which is
composed by SHA-256.  Since the noise source is not "white", signal is
whiten by this Conditioning Component.

My experience with STM32F103 and NeuG shows that noise source is
stable at least for a year.


Test results
============

See files under the directory test-results, for test result of
PractRand 0.92.

I collect 140 files of 125MB (>= 16GiB), and run the test suite of
PractRand 0.92.  Collecting 140 files, it took two days and a half.


Git Repository
==============

NeuG is available in the Gnuk repository at:

    https://anonscm.debian.org/cgit/gnuk/gnuk/

You can get it by:

    $ git clone git://anonscm.debian.org/gnuk/gnuk/neug.git


I put Chopstx and Fraucheky as a submodules of Git.  Please do this:

  $ git submodule init
  $ git submodule update



Information on the Web
======================

Please see the FST-01 support pages:

    http://www.gniibe.org/category/fst-01.html

Please consider to join Gnuk-users mailing list:

    https://lists.alioth.debian.org/mailman/listinfo/gnuk-users



Your Contributions
==================

FSIJ welcomes your contributions.  Please assign your copyright
to FSIJ (if possible).


Foot note
==========

If NeuG had a family name, it must be Kunisada.
-- 
